Almost done with the contacts application... (one more after this)

Now we'll add data persistence using a SQLite database.

Your application should behave as follows:

1.    Make sure your contact class has an id.
2.    All database access should be managed via a helper class (I call it ContactsDB). Implement this in a similar manner to the example I showed in class. 
		This class will have methods like getAllContacts(), getContact(id), insertContact(Contact) and updateContact(Contact). 
		This class should manage all database access. You'll need to create a new instance of this class in each activity that performs database access. 
		Be sure to have a close() method that can be called from your activity's onPause() so you can close the underlying database connection, or android will complain.
3.    When creating your database, be sure to add a field called _id as described in class (integer primary key autoincrement)
4.    The list activity should read all contacts from the database and display them in the list. You will no longer be using hardcoded contacts.
5.    On the list activity, add a "Create" menu item. Pressing this should start your edit activity. 
		Pass a flag in your intent to indicate that you're creating a new contact, and -1 for the id of the contact being created. 
		(You won't use the id when creating a new contact). Do not pass the contact data.
6.    On the display activity, when starting the edit activity, pass a flag to indicate that you're updating an existing entry, 
		and the id of the contact being edited. Do not pass the contact data.
7.    On the edit activity, read the contact from the database (based on the id that was passed in). When the save button is pressed, either insert a new contact 
		(if creating a contact) or update an existing contact. Do not return the contact to the caller.
8.    In activities that need to update information, re-read the contact or contact list. I recommend moving your view-updating code to onStart().
9.    You can use SimpleCursorAdapter to manage your list entries based on a database cursor if you would like. If you do, your getAllContacts() 
		method in your ContactsDB class will need to return a cursor. If you don't use this, your getAllContacts() should return a list of populated contacts objects.

